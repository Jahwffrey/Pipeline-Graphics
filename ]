#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <math.h>
const float TAU = 6.28318530718;

void makeBox(float x,float y,float z,float red,float green,float blue);

void makeEave(float x,float y,float z);

void makePillar(float x,float y,float z);

void deepTriangle(float v1[3],float v2[3],float v3[3],float xchange,float ychange,float zchange,bool drawOtherSide,bool s1,bool s2,bool s3);

void deepRectangle(float x1, float y1, float x2, float y2, float depth, bool drawOtherSide);

void makeShape(int numSides,float radius,bool drawOtherSide);

float* sVect(float v[],float x,float y,float z){
	v[0]=x;
	v[1]=y;
	v[2]=z;
	return v;
}

//The display function:
void display(){
	float v1[3];
	float v2[3];
	float v3[3];
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
	glShadeModel(GL_FLAT);
	glPushMatrix();
		//Box1
		glTranslatef(-28,8,0);
		makeBox(-4,4,4,1,0,0);
		glColor3f(1,1,1);
		//triangle shape face front
		deepTriangle(sVect(v1,-2,2,4),sVect(v2,2,2,4),sVect(v3,0,-2,4),0,0,-.5,false,false,false,false);
		//'T' Face right
		deepTriangle(sVect(v1,4,2.5,-1.5),sVect(v2,4,2.5,1.5),sVect(v3,4,2,-1.5),-.5,0,0,false,false,true,false);
		deepTriangle(sVect(v1,4,2.5,1.5),sVect(v2,4,2,-1.5),sVect(v3,4,2,1.5),-.5,0,0,false,true,false,false);
		deepTriangle(sVect(v1,4,2,.5),sVect(v2,4,2,-.5),sVect(v3,4,-2,.5),-.5,0,0,false,true,true,false);
		deepTriangle(sVect(v1,4,-2,-.5),v2,v3,-.5,0,0,false,false,false,false);
		//diamond face back
		deepTriangle(sVect(v1,0,-2.5,-4),sVect(v2,-2,0,-4),sVect(v3,2,0,-4),0,0,.5,false,false,true,false);
		deepTriangle(sVect(v1,0,2.5,-4),sVect(v2,-2,0,-4),sVect(v3,2,0,-4),0,0,.5,false,false,true,false);
		//+ face left
		deepTriangle(sVect(v1,-4,2.5,.5),sVect(v2,-4,2.5,-.5),sVect(v3,-4,-2.5,.5),.5,0,0,false,false,true,false);
		deepTriangle(sVect(v1,-4,-2.5,-.5),sVect(v2,-4,2.5,-.5),sVect(v3,-4,-2.5,.5),.5,0,0,false,false,true,false);
		deepTriangle(sVect(v1,-4,-.5,2.5),sVect(v2,-4,.5,2.5),sVect(v3,-4,-.5,-2.5),.5,0,0,false,false,true,false);
		deepTriangle(sVect(v1,-4,.5,-2.5),v2,v3,.5,0,0,false,false,true,false);
		//dice 1 face top
		glPushMatrix();
			glTranslatef(0,4,0);
			glRotatef(-90,1,0,0);
			makeShape(20,1,false);
		glPopMatrix();
		// / face bottom
		deepTriangle(sVect(v1,1.5,-4,2.5),sVect(v2,2.5,-4,2.5),sVect(v3,-2.5,-4,-2.5),0,.5,0,false,false,true,false);
		deepTriangle(sVect(v1,-1.5,-4,-2.5),v2,v3,0,.5,0,false,false,true,false);
	glPopMatrix();

	glPushMatrix();
		//Box2
		glTranslatef(-20,8,0);
		makeBox(-4,4,4,0,1,0);
		glColor3f(1,1,1);
		//square shape face front
		glPushMatrix();
			glTranslatef(0,0,4);
			glRotatef(45,0,0,1);
			makeShape(4,2.5,false);
		glPopMatrix();
		//'E' face right
		glPushMatrix();
			glTranslatef(4,0,0);
			glRotatef(90,0,1,0);
			deepRectangle(-2.5,2.5,-1.5,-2.5,.5,false);
			deepRectangle(-1.5,2.5,2.5,1.5,.5,false);
			deepRectangle(-1.5,.5,2.5,-.5,.5,false);
			deepRectangle(-1.5,-1.5,2.5,-2.5,.5,false);
		glPopMatrix();
		//trapezoid face back
		glPushMatrix();
			glTranslatef(0,0,-4);
			glRotatef(180,0,1,0);
			deepRectangle(-1,2,1,-2,.5,false);
			deepTriangle(sVect(v1,-1,2,0),sVect(v2,-2.5,-2,0),sVect(v3,1,-2,0),0,0,-.5,false,false,false,true);
			deepTriangle(sVect(v1,1,2,0),sVect(v2,2.5,-2,0),sVect(v3,-1,-2,0),0,0,-.5,false,false,false,true);
		glPopMatrix();
		//- face left
		deepTriangle(sVect(v1,-4,-.5,2.5),sVect(v2,-4,.5,2.5),sVect(v3,-4,-.5,-2.5),.5,0,0,false,false,true,false);
		deepTriangle(sVect(v1,-4,.5,-2.5),v2,v3,.5,0,0,false,false,true,false);
		//dice 2 face top
		glPushMatrix();
			glTranslatef(0,4,0);
			glRotatef(-90,1,0,0);
			glPushMatrix();
				glTranslatef(1.8,1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(-1.8,-1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
		glPopMatrix();
		// box face bottom
		glPushMatrix();
			glTranslatef(0,-4,0);
			glRotatef(90,1,0,0);
			deepRectangle(2.5,2.5,1.5,-2.5,.5,false);
			deepRectangle(-2.5,2.5,-1.5,-2.5,.5,false);
			deepRectangle(2.5,2.5,-2.5,1.5,.5,false);
			deepRectangle(2.5,-2.5,-2.5,-1.5,.5,false);		
		glPopMatrix();
	glPopMatrix();
	
	glPushMatrix();
		//Box3
		glTranslatef(-12,8,0);
		glRotatef(0,0,1,0);
		makeBox(-4,4,4,0,0,1);
		glColor3f(1,1,1);
		//pentagon shape face front
		glPushMatrix();
			glTranslatef(0,0,4);
			glRotatef(45,0,0,1);
			makeShape(5,2.5,false);
		glPopMatrix();
		//'F' face right
		glPushMatrix();
			glTranslatef(4,0,0);
			glRotatef(90,0,1,0);
			deepRectangle(-2.5,2.5,-1.5,-2.5,.5,false);
			deepRectangle(-1.5,2.5,2.5,1.5,.5,false);
			deepRectangle(-1.5,.5,2.5,-.5,.5,false);
		glPopMatrix();
		//rhombus face back
		glPushMatrix();
			glTranslatef(0,0,-4);
			glRotatef(180,0,1,0);
			deepRectangle(-1,2,1,-2,.5,false);
			deepTriangle(sVect(v1,-1,2,0),sVect(v2,-2.5,-2,0),sVect(v3,1,-2,0),0,0,-.5,false,false,false,true);
			deepTriangle(sVect(v1,1,-2,0),sVect(v2,2.5,2,0),sVect(v3,-1,2,0),0,0,-.5,false,false,false,true);
		glPopMatrix();
		//X face left
		glPushMatrix();
			glTranslatef(-4,0,0);
			glRotatef(-90,0,1,0);
			glPushMatrix();
				glRotatef(45,0,0,1);
				deepRectangle(-.8,2.5,.8,-2.5,.5,false);
			glPopMatrix();
			glPushMatrix();
				glRotatef(-45,0,0,1);
				deepRectangle(-.8,2.5,.8,-2.5,.5,false);
			glPopMatrix();
		glPopMatrix();
		//dice 3 face top
		glPushMatrix();
			glTranslatef(0,4,0);
			glRotatef(-90,1,0,0);
			glPushMatrix();
				glTranslatef(1.8,1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(-1.8,-1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
				makeShape(20,1,false);
		glPopMatrix();
		// triangle face w/hole bottom
		glPushMatrix();
			glTranslatef(0,-4,0);
			glRotatef(90,1,0,0);
			deepTriangle(sVect(v1,-1,-1,0),sVect(v2,1,-1,0),sVect(v3,-2.5,-2,0),0,0,-.5,false,false,true,false);
			deepTriangle(sVect(v1,2.5,-2,0),v2,v3,0,0,-.5,false,false,true,false);	
			deepTriangle(v1,v2,sVect(v3,0,2.5,0),0,0,-.5,false,true,false,false);
			deepTriangle(sVect(v1,0,1,0),v2,v3,0,0,-.5,false,false,true,false);
			deepTriangle(v1,sVect(v2,-2.5,-2,0),v3,0,0,-.5,false,true,false,true);
			deepTriangle(v1,v2,sVect(v3,-1,-1,0),0,0,0-.5,false,false,false,true);
		glPopMatrix();
	glPopMatrix();	
	
	glPushMatrix();
		//Box 4
		glTranslatef(0,8,0);
		glRotatef(180,0,1,0);
		makeBox(-4,4,4,1,0,1);
		glColor3f(1,1,1);
		//hexagon shape face front
		glPushMatrix();
			glTranslatef(0,0,4);
			makeShape(6,2.5,false);
		glPopMatrix();
		//'H' face right
		glPushMatrix();
			glTranslatef(4,0,0);
			glRotatef(90,0,1,0);
			deepRectangle(-2.5,2.5,-1.5,-2.5,.5,false);
			deepRectangle(-1.5,.5,2.5,-.5,.5,false);
			deepRectangle(2.5,2.5,1.5,-2.5,.5,false);
		glPopMatrix();
		//V face back
		glPushMatrix();
			glTranslatef(0,0,-4);
			glRotatef(180,0,1,0);
			deepTriangle(sVect(v1,-2.5,2.5,0),sVect(v2,-1.8,2.5,0),sVect(v3,0,-2.5,0),0,0,-.5,false,false,true,false);
			deepTriangle(sVect(v1,0,-1.5,0),v2,v3,0,0,-.5,false,false,true,false);
		glPopMatrix();
		//% face left///////
		glPushMatrix();
			glTranslatef(-4,0,0);
			glRotatef(-90,0,1,0);
			deepRectangle(-2.5,.8,2.5,-.8,.5,false);
			glPushMatrix();
				glTranslatef(0,2,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(0,-2,0);
				makeShape(20,1,false);
			glPopMatrix();
		glPopMatrix();
		//dice 4 face top
		glPushMatrix();
			glTranslatef(0,4,0);
			glRotatef(-90,1,0,0);
			glPushMatrix();
				glTranslatef(1.8,1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(-1.8,-1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(1.8,-1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
			glPushMatrix();
				glTranslatef(-1.8,1.8,0);
				makeShape(20,1,false);
			glPopMatrix();
		glPopMatrix();
		// triangle face w/hole bottom
		glPushMatrix();
			glTranslatef(0,-4,0);
			glRotatef(90,1,0,0);
			deepTriangle(sVect(v1,-1,-1,0),sVect(v2,1,-1,0),sVect(v3,-2.5,-2,0),0,0,-.5,false,false,true,false);
			deepTriangle(sVect(v1,2.5,-2,0),v2,v3,0,0,-.5,false,false,true,false);	
			deepTriangle(v1,v2,sVect(v3,0,2.5,0),0,0,-.5,false,true,false,false);
			deepTriangle(sVect(v1,0,1,0),v2,v3,0,0,-.5,false,false,true,false);
			deepTriangle(v1,sVect(v2,-2.5,-2,0),v3,0,0,-.5,false,true,false,true);
			deepTriangle(v1,v2,sVect(v3,-1,-1,0),0,0,0-.5,false,false,false,true);
		glPopMatrix();
	glPopMatrix();	
	glutSwapBuffers();
}

void deepRectangle(float x1, float y1, float x2, float y2, float depth, bool drawOtherSide){
	float v1[3];
	float v2[3];
	float v3[3];
	deepTriangle(sVect(v1,x1,y1,0),sVect(v2,x2,y1,0),sVect(v3,x1,y2,0),0,0,-depth,drawOtherSide,false,true,false);
	deepTriangle(sVect(v1,x2,y2,0),v2,v3,0,0,-.5,drawOtherSide,false,true,false);
}

void makeShape(int numSides,float radius,bool drawOtherSide){
	float v1[3];
	float v2[3];
	float v3[3];
	float x1 = radius;
	float y1 = 0;
	float xn = 0;
	float yn = 0;
	float theta = 0;
	for(int i = 1;i < numSides;i++){
		theta = i*(TAU/numSides);
		xn = radius*cos(theta);
		yn = radius*sin(theta);
		deepTriangle(sVect(v1,0,0,0),sVect(v2,x1,y1,0),sVect(v3,xn,yn,0),0,0,-.5,drawOtherSide,true,false,true);
		x1=xn;
		y1=yn;
	}
	deepTriangle(sVect(v1,0,0,0),sVect(v2,xn,yn,0),sVect(v3,radius,0,0),0,0,-.5,drawOtherSide,true,false,true);
}

void deepTriangle(float v1[3],float v2[3],float v3[3],float xc,float yc,float zc,bool drawOtherSide,bool skip1,bool skip2,bool skip3){
	glColor3f(1,1,1);
	//The basic triangle
	glBegin(GL_TRIANGLES);
		//front
		glVertex3f(v1[0],v1[1],v1[2]);
		glVertex3f(v2[0],v2[1],v2[2]);
		glVertex3f(v3[0],v3[1],v3[2]);
		//back
		if(drawOtherSide){
			glVertex3f(v1[0]+xc,v1[1]+yc,v1[2]+zc);
			glVertex3f(v2[0]+xc,v2[1]+yc,v2[2]+zc);
			glVertex3f(v3[0]+xc,v3[1]+yc,v3[2]+zc);
		}
	glEnd();
	glColor3f(.8,.8,.8);
	//fill in the sides
	glBegin(GL_QUADS);
		if(!skip1){
			glVertex3f(v1[0],v1[1],v1[2]);
			glVertex3f(v1[0]+xc,v1[1]+yc,v1[2]+zc);
			glVertex3f(v2[0]+xc,v2[1]+yc,v2[2]+zc);
			glVertex3f(v2[0],v2[1],v2[2]);
		}

		if(!skip2){
			glVertex3f(v2[0],v2[1],v2[2]);
			glVertex3f(v2[0]+xc,v2[1]+yc,v2[2]+zc);
			glVertex3f(v3[0]+xc,v3[1]+yc,v3[2]+zc);
			glVertex3f(v3[0],v3[1],v3[2]);
		}

		if(!skip3){
			glVertex3f(v3[0],v3[1],v3[2]);
			glVertex3f(v3[0]+xc,v3[1]+yc,v3[2]+zc);
			glVertex3f(v1[0]+xc,v1[1]+yc,v1[2]+zc);
			glVertex3f(v1[0],v1[1],v1[2]);
		}
	glEnd();
}

void makeBox(float x,float y, float z,float red,float green,float blue){
	//protruding edges
	glColor3f(red,green,blue);
	makeEave(x,y,z);
	makeEave(x,y-7,z);
	glColor3f(red/1.5,green/1.5,blue/1.5);
	makePillar(x,y-1,z);
	makePillar(x+7,y-1,z);
	makePillar(x+7,y-1,z-7);
	makePillar(x,y-1,z-7);
	glColor3f(red/2.0,green/2.0,blue/2.0);
	//inner cudes
	glBegin(GL_TRIANGLE_STRIP);
		//front
		glVertex3f(x+.5,y-.5,z-.5);
		glVertex3f(x+.5,y-7.5,z-.5);
		glVertex3f(x+7.5,y-.5,z-.5);
		glVertex3f(x+7.5,y-7.5,z-.5);
		//right
		glVertex3f(x+7.5,y-.5,z-7.5);
		glVertex3f(x+7.5,y-7.5,z-7.5);
		//back
		glVertex3f(x+.5,y-.5,z-7.5);
		glVertex3f(x+.5,y-7.5,z-7.5);
		//left
		glVertex3f(x+.5,y-.5,z-.5);
		glVertex3f(x+.5,y-7.5,z-.5);
	glEnd();
	glBegin(GL_QUADS);
		//top
		glVertex3f(x+.5,y-.5,z-.5);
		glVertex3f(x+7.5,y-.5,z-.5);
		glVertex3f(x+7.5,y-.5,z-7.5);
		glVertex3f(x+.5,y-.5,z-7.5);
		//bottom
		glVertex3f(x+.5,y-7.5,z-.5);
		glVertex3f(x+7.5,y-7.5,z-.5);
		glVertex3f(x+7.5,y-7.5,z-7.5);
		glVertex3f(x+.5,y-7.5,z-7.5);		
	glEnd();
}

void makePillar(float x,float y,float z){
	glBegin(GL_TRIANGLE_STRIP);
		//front
		glVertex3f(x,y,z);
		glVertex3f(x,y-6,z);
		glVertex3f(x+1,y,z);
		glVertex3f(x+1,y-6,z);
		//right
		glVertex3f(x+1,y,z-1);
		glVertex3f(x+1,y-6,z-1);
		//back
		glVertex3f(x,y,z-1);
		glVertex3f(x,y-6,z-1);
		//left
		glVertex3f(x,y,z);
		glVertex3f(x,y-6,z);
	glEnd();
}

void makeEave(float x, float y, float z){
	glBegin(GL_TRIANGLE_STRIP);
		//***Eaves
		//**outer
		//front
		glVertex3f(x,y,z);
		glVertex3f(x,y-1,z);
		glVertex3f(x+8,y,z);
		glVertex3f(x+8,y-1,z);
		//right
		glVertex3f(x+8,y,z-8);
		glVertex3f(x+8,y-1,z-8);
		//back
		glVertex3f(x,y,z-8);
		glVertex3f(x,y-1,z-8);
		//left
		glVertex3f(x,y,z);
		glVertex3f(x,y-1,z);
	glEnd();
	glBegin(GL_TRIANGLE_STRIP);
		//**inner
		//front
		glVertex3f(x+1,y,z-1);
		glVertex3f(x+1,y-1,z-1);
		glVertex3f(x+7,y,z-1);
		glVertex3f(x+7,y-1,z-1);
		//right
		glVertex3f(x+7,y,z-7);
		glVertex3f(x+7,y-1,z-7);
		//back
		glVertex3f(x+1,y,z-7);
		glVertex3f(x+1,y-1,z-7);
		//left
		glVertex3f(x+1,y,z-1);
		glVertex3f(x+1,y-1,z-1);
	glEnd();
	//top and bottom of eaves
	for(int i = 1;i>=0;i--){
		glBegin(GL_TRIANGLE_STRIP);
			//left
			glVertex3f(x,y-i,z);
			glVertex3f(x+1,y-i,z-1);
			glVertex3f(x,y-i,z-8);
			glVertex3f(x+1,y-i,z-7);
			//back
			glVertex3f(x+8,y-i,z-8);
			glVertex3f(x+7,y-i,z-7);
			//right
			glVertex3f(x+8,y-i,z);
			glVertex3f(x+7,y-i,z-1);
			//front
			glVertex3f(x,y-i,z);
			glVertex3f(x+1,y-i,z-1);
		glEnd();
	} 
}

//Easy exiting
void keys(unsigned char key, int x, int y){
	switch(key){
		case 'q':
			exit(0);
			break;
	}
}

int main(int argc, char **argv){
	int win_width = 700;
	int win_height = 700;

	//Set up the window and things
	glutInit(&argc,argv);
	glutInitDisplayMode(GLUT_RGB | GLUT_DOUBLE | GLUT_DEPTH);
	glutInitWindowSize(win_width,win_height);
	glutCreateWindow("Static Blocks");
	glutDisplayFunc(display);
	glutKeyboardFunc(keys);

	//Set the initial settings
	//glEnable(GL_LIGHTING);	
	glEnable(GL_DEPTH_TEST); //<- hidden surface elimination eventually
	
	glMatrixMode(GL_PROJECTION);
	gluPerspective(40.0,1,.1,100);
	
	glMatrixMode(GL_MODELVIEW);
	glLoadIdentity();
	gluLookAt(0.0,20.0,50.0,0,0,0,0,1.0,0); //i am behind and up

	glutMainLoop();
	
	return 0;
}
